{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\nutil.inherits(Writable, Stream);\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function () {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function () {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n  if (util.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (!util.isFunction(cb)) cb = function () {};\n  if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.buffer.length) clearBuffer(this, state);\n  }\n};\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, false, len, chunk, encoding, cb);\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync) process.nextTick(function () {\n    state.pendingcb--;\n    cb(er);\n  });else {\n    state.pendingcb--;\n    cb(er);\n  }\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n    if (!finished && !state.corked && !state.bufferProcessing && state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      process.nextTick(function () {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++) cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function (err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n    if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;\n  }\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n  if (!util.isNullOrUndefined(chunk)) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\nfunction needFinish(stream, state) {\n  return state.ending && state.length === 0 && !state.finished && !state.writing;\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else prefinish(stream, state);\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n}","map":{"version":3,"names":["module","exports","Writable","Buffer","require","WritableState","util","inherits","Stream","WriteReq","chunk","encoding","cb","callback","options","stream","Duplex","hwm","highWaterMark","defaultHwm","objectMode","writableObjectMode","needDrain","ending","ended","finished","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","buffer","pendingcb","prefinished","errorEmitted","_writableState","writable","call","prototype","pipe","emit","Error","writeAfterEnd","state","process","nextTick","validChunk","valid","isBuffer","isString","isNullOrUndefined","TypeError","write","ret","isFunction","writeOrBuffer","cork","uncork","clearBuffer","decodeChunk","len","push","doWrite","writev","_writev","_write","onwriteError","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","finishMaybe","cbs","c","err","i","entry","slice","end","endWritable","prefinish","need","once"],"sources":["C:/Users/Moran/Documents/react-projects/react-demo/node_modules/level-blobs/node_modules/readable-stream/lib/_stream_writable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,QAAQ;;AAEzB;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,MAAM;AACrC;;AAEAD,QAAQ,CAACG,aAAa,GAAGA,aAAa;;AAGtC;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,cAAc,CAAC;AAClCE,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAAC,UAAU,CAAC;AACnC;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAE9BE,IAAI,CAACC,QAAQ,CAACL,QAAQ,EAAEM,MAAM,CAAC;AAE/B,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EACrC,IAAI,CAACF,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACE,QAAQ,GAAGD,EAAE;AACpB;AAEA,SAASP,aAAaA,CAACS,OAAO,EAAEC,MAAM,EAAE;EACtC,IAAIC,MAAM,GAAGZ,OAAO,CAAC,kBAAkB,CAAC;EAExCU,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;EAEvB;EACA;EACA;EACA,IAAIG,GAAG,GAAGH,OAAO,CAACI,aAAa;EAC/B,IAAIC,UAAU,GAAGL,OAAO,CAACM,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EACpD,IAAI,CAACF,aAAa,GAAID,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAIA,GAAG,GAAGE,UAAU;;EAE1D;EACA;EACA,IAAI,CAACC,UAAU,GAAG,CAAC,CAACN,OAAO,CAACM,UAAU;EAEtC,IAAIL,MAAM,YAAYC,MAAM,EAC1B,IAAI,CAACI,UAAU,GAAG,IAAI,CAACA,UAAU,IAAI,CAAC,CAACN,OAAO,CAACO,kBAAkB;;EAEnE;EACA,IAAI,CAACH,aAAa,GAAG,CAAC,CAAC,IAAI,CAACA,aAAa;EAEzC,IAAI,CAACI,SAAS,GAAG,KAAK;EACtB;EACA,IAAI,CAACC,MAAM,GAAG,KAAK;EACnB;EACA,IAAI,CAACC,KAAK,GAAG,KAAK;EAClB;EACA,IAAI,CAACC,QAAQ,GAAG,KAAK;;EAErB;EACA;EACA;EACA,IAAIC,QAAQ,GAAGZ,OAAO,CAACa,aAAa,KAAK,KAAK;EAC9C,IAAI,CAACA,aAAa,GAAG,CAACD,QAAQ;;EAE9B;EACA;EACA;EACA,IAAI,CAACE,eAAe,GAAGd,OAAO,CAACc,eAAe,IAAI,MAAM;;EAExD;EACA;EACA;EACA,IAAI,CAACC,MAAM,GAAG,CAAC;;EAEf;EACA,IAAI,CAACC,OAAO,GAAG,KAAK;;EAEpB;EACA,IAAI,CAACC,MAAM,GAAG,CAAC;;EAEf;EACA;EACA;EACA;EACA,IAAI,CAACC,IAAI,GAAG,IAAI;;EAEhB;EACA;EACA;EACA,IAAI,CAACC,gBAAgB,GAAG,KAAK;;EAE7B;EACA,IAAI,CAACC,OAAO,GAAG,UAASC,EAAE,EAAE;IAC1BD,OAAO,CAACnB,MAAM,EAAEoB,EAAE,CAAC;EACrB,CAAC;;EAED;EACA,IAAI,CAACC,OAAO,GAAG,IAAI;;EAEnB;EACA,IAAI,CAACC,QAAQ,GAAG,CAAC;EAEjB,IAAI,CAACC,MAAM,GAAG,EAAE;;EAEhB;EACA;EACA,IAAI,CAACC,SAAS,GAAG,CAAC;;EAElB;EACA;EACA,IAAI,CAACC,WAAW,GAAG,KAAK;;EAExB;EACA,IAAI,CAACC,YAAY,GAAG,KAAK;AAC3B;AAEA,SAASvC,QAAQA,CAACY,OAAO,EAAE;EACzB,IAAIE,MAAM,GAAGZ,OAAO,CAAC,kBAAkB,CAAC;;EAExC;EACA;EACA,IAAI,EAAE,IAAI,YAAYF,QAAQ,CAAC,IAAI,EAAE,IAAI,YAAYc,MAAM,CAAC,EAC1D,OAAO,IAAId,QAAQ,CAACY,OAAO,CAAC;EAE9B,IAAI,CAAC4B,cAAc,GAAG,IAAIrC,aAAa,CAACS,OAAO,EAAE,IAAI,CAAC;;EAEtD;EACA,IAAI,CAAC6B,QAAQ,GAAG,IAAI;EAEpBnC,MAAM,CAACoC,IAAI,CAAC,IAAI,CAAC;AACnB;;AAEA;AACA1C,QAAQ,CAAC2C,SAAS,CAACC,IAAI,GAAG,YAAW;EACnC,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE,IAAIC,KAAK,CAAC,4BAA4B,CAAC,CAAC;AAC7D,CAAC;AAGD,SAASC,aAAaA,CAAClC,MAAM,EAAEmC,KAAK,EAAEtC,EAAE,EAAE;EACxC,IAAIuB,EAAE,GAAG,IAAIa,KAAK,CAAC,iBAAiB,CAAC;EACrC;EACAjC,MAAM,CAACgC,IAAI,CAAC,OAAO,EAAEZ,EAAE,CAAC;EACxBgB,OAAO,CAACC,QAAQ,CAAC,YAAW;IAC1BxC,EAAE,CAACuB,EAAE,CAAC;EACR,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASkB,UAAUA,CAACtC,MAAM,EAAEmC,KAAK,EAAExC,KAAK,EAAEE,EAAE,EAAE;EAC5C,IAAI0C,KAAK,GAAG,IAAI;EAChB,IAAI,CAAChD,IAAI,CAACiD,QAAQ,CAAC7C,KAAK,CAAC,IACrB,CAACJ,IAAI,CAACkD,QAAQ,CAAC9C,KAAK,CAAC,IACrB,CAACJ,IAAI,CAACmD,iBAAiB,CAAC/C,KAAK,CAAC,IAC9B,CAACwC,KAAK,CAAC9B,UAAU,EAAE;IACrB,IAAIe,EAAE,GAAG,IAAIuB,SAAS,CAAC,iCAAiC,CAAC;IACzD3C,MAAM,CAACgC,IAAI,CAAC,OAAO,EAAEZ,EAAE,CAAC;IACxBgB,OAAO,CAACC,QAAQ,CAAC,YAAW;MAC1BxC,EAAE,CAACuB,EAAE,CAAC;IACR,CAAC,CAAC;IACFmB,KAAK,GAAG,KAAK;EACf;EACA,OAAOA,KAAK;AACd;AAEApD,QAAQ,CAAC2C,SAAS,CAACc,KAAK,GAAG,UAASjD,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EACvD,IAAIsC,KAAK,GAAG,IAAI,CAACR,cAAc;EAC/B,IAAIkB,GAAG,GAAG,KAAK;EAEf,IAAItD,IAAI,CAACuD,UAAU,CAAClD,QAAQ,CAAC,EAAE;IAC7BC,EAAE,GAAGD,QAAQ;IACbA,QAAQ,GAAG,IAAI;EACjB;EAEA,IAAIL,IAAI,CAACiD,QAAQ,CAAC7C,KAAK,CAAC,EACtBC,QAAQ,GAAG,QAAQ,CAAC,KACjB,IAAI,CAACA,QAAQ,EAChBA,QAAQ,GAAGuC,KAAK,CAACtB,eAAe;EAElC,IAAI,CAACtB,IAAI,CAACuD,UAAU,CAACjD,EAAE,CAAC,EACtBA,EAAE,GAAG,SAAAA,CAAA,EAAW,CAAC,CAAC;EAEpB,IAAIsC,KAAK,CAAC1B,KAAK,EACbyB,aAAa,CAAC,IAAI,EAAEC,KAAK,EAAEtC,EAAE,CAAC,CAAC,KAC5B,IAAIyC,UAAU,CAAC,IAAI,EAAEH,KAAK,EAAExC,KAAK,EAAEE,EAAE,CAAC,EAAE;IAC3CsC,KAAK,CAACX,SAAS,EAAE;IACjBqB,GAAG,GAAGE,aAAa,CAAC,IAAI,EAAEZ,KAAK,EAAExC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,CAAC;EACvD;EAEA,OAAOgD,GAAG;AACZ,CAAC;AAED1D,QAAQ,CAAC2C,SAAS,CAACkB,IAAI,GAAG,YAAW;EACnC,IAAIb,KAAK,GAAG,IAAI,CAACR,cAAc;EAE/BQ,KAAK,CAACnB,MAAM,EAAE;AAChB,CAAC;AAED7B,QAAQ,CAAC2C,SAAS,CAACmB,MAAM,GAAG,YAAW;EACrC,IAAId,KAAK,GAAG,IAAI,CAACR,cAAc;EAE/B,IAAIQ,KAAK,CAACnB,MAAM,EAAE;IAChBmB,KAAK,CAACnB,MAAM,EAAE;IAEd,IAAI,CAACmB,KAAK,CAACpB,OAAO,IACd,CAACoB,KAAK,CAACnB,MAAM,IACb,CAACmB,KAAK,CAACzB,QAAQ,IACf,CAACyB,KAAK,CAACjB,gBAAgB,IACvBiB,KAAK,CAACZ,MAAM,CAACT,MAAM,EACrBoC,WAAW,CAAC,IAAI,EAAEf,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,SAASgB,WAAWA,CAAChB,KAAK,EAAExC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,IAAI,CAACuC,KAAK,CAAC9B,UAAU,IACjB8B,KAAK,CAACvB,aAAa,KAAK,KAAK,IAC7BrB,IAAI,CAACkD,QAAQ,CAAC9C,KAAK,CAAC,EAAE;IACxBA,KAAK,GAAG,IAAIP,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC;EACrC;EACA,OAAOD,KAAK;AACd;;AAEA;AACA;AACA;AACA,SAASoD,aAAaA,CAAC/C,MAAM,EAAEmC,KAAK,EAAExC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EACzDF,KAAK,GAAGwD,WAAW,CAAChB,KAAK,EAAExC,KAAK,EAAEC,QAAQ,CAAC;EAC3C,IAAIL,IAAI,CAACiD,QAAQ,CAAC7C,KAAK,CAAC,EACtBC,QAAQ,GAAG,QAAQ;EACrB,IAAIwD,GAAG,GAAGjB,KAAK,CAAC9B,UAAU,GAAG,CAAC,GAAGV,KAAK,CAACmB,MAAM;EAE7CqB,KAAK,CAACrB,MAAM,IAAIsC,GAAG;EAEnB,IAAIP,GAAG,GAAGV,KAAK,CAACrB,MAAM,GAAGqB,KAAK,CAAChC,aAAa;EAC5C;EACA,IAAI,CAAC0C,GAAG,EACNV,KAAK,CAAC5B,SAAS,GAAG,IAAI;EAExB,IAAI4B,KAAK,CAACpB,OAAO,IAAIoB,KAAK,CAACnB,MAAM,EAC/BmB,KAAK,CAACZ,MAAM,CAAC8B,IAAI,CAAC,IAAI3D,QAAQ,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,CAAC,CAAC,CAAC,KAErDyD,OAAO,CAACtD,MAAM,EAAEmC,KAAK,EAAE,KAAK,EAAEiB,GAAG,EAAEzD,KAAK,EAAEC,QAAQ,EAAEC,EAAE,CAAC;EAEzD,OAAOgD,GAAG;AACZ;AAEA,SAASS,OAAOA,CAACtD,MAAM,EAAEmC,KAAK,EAAEoB,MAAM,EAAEH,GAAG,EAAEzD,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EAChEsC,KAAK,CAACb,QAAQ,GAAG8B,GAAG;EACpBjB,KAAK,CAACd,OAAO,GAAGxB,EAAE;EAClBsC,KAAK,CAACpB,OAAO,GAAG,IAAI;EACpBoB,KAAK,CAAClB,IAAI,GAAG,IAAI;EACjB,IAAIsC,MAAM,EACRvD,MAAM,CAACwD,OAAO,CAAC7D,KAAK,EAAEwC,KAAK,CAAChB,OAAO,CAAC,CAAC,KAErCnB,MAAM,CAACyD,MAAM,CAAC9D,KAAK,EAAEC,QAAQ,EAAEuC,KAAK,CAAChB,OAAO,CAAC;EAC/CgB,KAAK,CAAClB,IAAI,GAAG,KAAK;AACpB;AAEA,SAASyC,YAAYA,CAAC1D,MAAM,EAAEmC,KAAK,EAAElB,IAAI,EAAEG,EAAE,EAAEvB,EAAE,EAAE;EACjD,IAAIoB,IAAI,EACNmB,OAAO,CAACC,QAAQ,CAAC,YAAW;IAC1BF,KAAK,CAACX,SAAS,EAAE;IACjB3B,EAAE,CAACuB,EAAE,CAAC;EACR,CAAC,CAAC,CAAC,KACA;IACHe,KAAK,CAACX,SAAS,EAAE;IACjB3B,EAAE,CAACuB,EAAE,CAAC;EACR;EAEApB,MAAM,CAAC2B,cAAc,CAACD,YAAY,GAAG,IAAI;EACzC1B,MAAM,CAACgC,IAAI,CAAC,OAAO,EAAEZ,EAAE,CAAC;AAC1B;AAEA,SAASuC,kBAAkBA,CAACxB,KAAK,EAAE;EACjCA,KAAK,CAACpB,OAAO,GAAG,KAAK;EACrBoB,KAAK,CAACd,OAAO,GAAG,IAAI;EACpBc,KAAK,CAACrB,MAAM,IAAIqB,KAAK,CAACb,QAAQ;EAC9Ba,KAAK,CAACb,QAAQ,GAAG,CAAC;AACpB;AAEA,SAASH,OAAOA,CAACnB,MAAM,EAAEoB,EAAE,EAAE;EAC3B,IAAIe,KAAK,GAAGnC,MAAM,CAAC2B,cAAc;EACjC,IAAIV,IAAI,GAAGkB,KAAK,CAAClB,IAAI;EACrB,IAAIpB,EAAE,GAAGsC,KAAK,CAACd,OAAO;EAEtBsC,kBAAkB,CAACxB,KAAK,CAAC;EAEzB,IAAIf,EAAE,EACJsC,YAAY,CAAC1D,MAAM,EAAEmC,KAAK,EAAElB,IAAI,EAAEG,EAAE,EAAEvB,EAAE,CAAC,CAAC,KACvC;IACH;IACA,IAAIa,QAAQ,GAAGkD,UAAU,CAAC5D,MAAM,EAAEmC,KAAK,CAAC;IAExC,IAAI,CAACzB,QAAQ,IACT,CAACyB,KAAK,CAACnB,MAAM,IACb,CAACmB,KAAK,CAACjB,gBAAgB,IACvBiB,KAAK,CAACZ,MAAM,CAACT,MAAM,EAAE;MACvBoC,WAAW,CAAClD,MAAM,EAAEmC,KAAK,CAAC;IAC5B;IAEA,IAAIlB,IAAI,EAAE;MACRmB,OAAO,CAACC,QAAQ,CAAC,YAAW;QAC1BwB,UAAU,CAAC7D,MAAM,EAAEmC,KAAK,EAAEzB,QAAQ,EAAEb,EAAE,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC,MAAM;MACLgE,UAAU,CAAC7D,MAAM,EAAEmC,KAAK,EAAEzB,QAAQ,EAAEb,EAAE,CAAC;IACzC;EACF;AACF;AAEA,SAASgE,UAAUA,CAAC7D,MAAM,EAAEmC,KAAK,EAAEzB,QAAQ,EAAEb,EAAE,EAAE;EAC/C,IAAI,CAACa,QAAQ,EACXoD,YAAY,CAAC9D,MAAM,EAAEmC,KAAK,CAAC;EAC7BA,KAAK,CAACX,SAAS,EAAE;EACjB3B,EAAE,CAAC,CAAC;EACJkE,WAAW,CAAC/D,MAAM,EAAEmC,KAAK,CAAC;AAC5B;;AAEA;AACA;AACA;AACA,SAAS2B,YAAYA,CAAC9D,MAAM,EAAEmC,KAAK,EAAE;EACnC,IAAIA,KAAK,CAACrB,MAAM,KAAK,CAAC,IAAIqB,KAAK,CAAC5B,SAAS,EAAE;IACzC4B,KAAK,CAAC5B,SAAS,GAAG,KAAK;IACvBP,MAAM,CAACgC,IAAI,CAAC,OAAO,CAAC;EACtB;AACF;;AAGA;AACA,SAASkB,WAAWA,CAAClD,MAAM,EAAEmC,KAAK,EAAE;EAClCA,KAAK,CAACjB,gBAAgB,GAAG,IAAI;EAE7B,IAAIlB,MAAM,CAACwD,OAAO,IAAIrB,KAAK,CAACZ,MAAM,CAACT,MAAM,GAAG,CAAC,EAAE;IAC7C;IACA,IAAIkD,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,KAAK,CAACZ,MAAM,CAACT,MAAM,EAAEmD,CAAC,EAAE,EAC1CD,GAAG,CAACX,IAAI,CAAClB,KAAK,CAACZ,MAAM,CAAC0C,CAAC,CAAC,CAACnE,QAAQ,CAAC;;IAEpC;IACA;IACAqC,KAAK,CAACX,SAAS,EAAE;IACjB8B,OAAO,CAACtD,MAAM,EAAEmC,KAAK,EAAE,IAAI,EAAEA,KAAK,CAACrB,MAAM,EAAEqB,KAAK,CAACZ,MAAM,EAAE,EAAE,EAAE,UAAS2C,GAAG,EAAE;MACzE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAAClD,MAAM,EAAEqD,CAAC,EAAE,EAAE;QACnChC,KAAK,CAACX,SAAS,EAAE;QACjBwC,GAAG,CAACG,CAAC,CAAC,CAACD,GAAG,CAAC;MACb;IACF,CAAC,CAAC;;IAEF;IACA/B,KAAK,CAACZ,MAAM,GAAG,EAAE;EACnB,CAAC,MAAM;IACL;IACA,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,KAAK,CAACZ,MAAM,CAACT,MAAM,EAAEmD,CAAC,EAAE,EAAE;MAC5C,IAAIG,KAAK,GAAGjC,KAAK,CAACZ,MAAM,CAAC0C,CAAC,CAAC;MAC3B,IAAItE,KAAK,GAAGyE,KAAK,CAACzE,KAAK;MACvB,IAAIC,QAAQ,GAAGwE,KAAK,CAACxE,QAAQ;MAC7B,IAAIC,EAAE,GAAGuE,KAAK,CAACtE,QAAQ;MACvB,IAAIsD,GAAG,GAAGjB,KAAK,CAAC9B,UAAU,GAAG,CAAC,GAAGV,KAAK,CAACmB,MAAM;MAE7CwC,OAAO,CAACtD,MAAM,EAAEmC,KAAK,EAAE,KAAK,EAAEiB,GAAG,EAAEzD,KAAK,EAAEC,QAAQ,EAAEC,EAAE,CAAC;;MAEvD;MACA;MACA;MACA;MACA,IAAIsC,KAAK,CAACpB,OAAO,EAAE;QACjBkD,CAAC,EAAE;QACH;MACF;IACF;IAEA,IAAIA,CAAC,GAAG9B,KAAK,CAACZ,MAAM,CAACT,MAAM,EACzBqB,KAAK,CAACZ,MAAM,GAAGY,KAAK,CAACZ,MAAM,CAAC8C,KAAK,CAACJ,CAAC,CAAC,CAAC,KAErC9B,KAAK,CAACZ,MAAM,CAACT,MAAM,GAAG,CAAC;EAC3B;EAEAqB,KAAK,CAACjB,gBAAgB,GAAG,KAAK;AAChC;AAEA/B,QAAQ,CAAC2C,SAAS,CAAC2B,MAAM,GAAG,UAAS9D,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EACxDA,EAAE,CAAC,IAAIoC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAElC,CAAC;AAED9C,QAAQ,CAAC2C,SAAS,CAAC0B,OAAO,GAAG,IAAI;AAEjCrE,QAAQ,CAAC2C,SAAS,CAACwC,GAAG,GAAG,UAAS3E,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EACrD,IAAIsC,KAAK,GAAG,IAAI,CAACR,cAAc;EAE/B,IAAIpC,IAAI,CAACuD,UAAU,CAACnD,KAAK,CAAC,EAAE;IAC1BE,EAAE,GAAGF,KAAK;IACVA,KAAK,GAAG,IAAI;IACZC,QAAQ,GAAG,IAAI;EACjB,CAAC,MAAM,IAAIL,IAAI,CAACuD,UAAU,CAAClD,QAAQ,CAAC,EAAE;IACpCC,EAAE,GAAGD,QAAQ;IACbA,QAAQ,GAAG,IAAI;EACjB;EAEA,IAAI,CAACL,IAAI,CAACmD,iBAAiB,CAAC/C,KAAK,CAAC,EAChC,IAAI,CAACiD,KAAK,CAACjD,KAAK,EAAEC,QAAQ,CAAC;;EAE7B;EACA,IAAIuC,KAAK,CAACnB,MAAM,EAAE;IAChBmB,KAAK,CAACnB,MAAM,GAAG,CAAC;IAChB,IAAI,CAACiC,MAAM,CAAC,CAAC;EACf;;EAEA;EACA,IAAI,CAACd,KAAK,CAAC3B,MAAM,IAAI,CAAC2B,KAAK,CAACzB,QAAQ,EAClC6D,WAAW,CAAC,IAAI,EAAEpC,KAAK,EAAEtC,EAAE,CAAC;AAChC,CAAC;AAGD,SAAS+D,UAAUA,CAAC5D,MAAM,EAAEmC,KAAK,EAAE;EACjC,OAAQA,KAAK,CAAC3B,MAAM,IACZ2B,KAAK,CAACrB,MAAM,KAAK,CAAC,IAClB,CAACqB,KAAK,CAACzB,QAAQ,IACf,CAACyB,KAAK,CAACpB,OAAO;AACxB;AAEA,SAASyD,SAASA,CAACxE,MAAM,EAAEmC,KAAK,EAAE;EAChC,IAAI,CAACA,KAAK,CAACV,WAAW,EAAE;IACtBU,KAAK,CAACV,WAAW,GAAG,IAAI;IACxBzB,MAAM,CAACgC,IAAI,CAAC,WAAW,CAAC;EAC1B;AACF;AAEA,SAAS+B,WAAWA,CAAC/D,MAAM,EAAEmC,KAAK,EAAE;EAClC,IAAIsC,IAAI,GAAGb,UAAU,CAAC5D,MAAM,EAAEmC,KAAK,CAAC;EACpC,IAAIsC,IAAI,EAAE;IACR,IAAItC,KAAK,CAACX,SAAS,KAAK,CAAC,EAAE;MACzBgD,SAAS,CAACxE,MAAM,EAAEmC,KAAK,CAAC;MACxBA,KAAK,CAACzB,QAAQ,GAAG,IAAI;MACrBV,MAAM,CAACgC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC,MACCwC,SAAS,CAACxE,MAAM,EAAEmC,KAAK,CAAC;EAC5B;EACA,OAAOsC,IAAI;AACb;AAEA,SAASF,WAAWA,CAACvE,MAAM,EAAEmC,KAAK,EAAEtC,EAAE,EAAE;EACtCsC,KAAK,CAAC3B,MAAM,GAAG,IAAI;EACnBuD,WAAW,CAAC/D,MAAM,EAAEmC,KAAK,CAAC;EAC1B,IAAItC,EAAE,EAAE;IACN,IAAIsC,KAAK,CAACzB,QAAQ,EAChB0B,OAAO,CAACC,QAAQ,CAACxC,EAAE,CAAC,CAAC,KAErBG,MAAM,CAAC0E,IAAI,CAAC,QAAQ,EAAE7E,EAAE,CAAC;EAC7B;EACAsC,KAAK,CAAC1B,KAAK,GAAG,IAAI;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}