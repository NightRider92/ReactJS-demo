{"ast":null,"code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar codes = require('./codes.json');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status;\n\n// status code to message map\nstatus.STATUS_CODES = codes;\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes);\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap(statuses, codes) {\n  var arr = [];\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code);\n\n    // Populate properties\n    statuses[status] = message;\n    statuses[message] = status;\n    statuses[message.toLowerCase()] = status;\n\n    // Add to array\n    arr.push(status);\n  });\n  return arr;\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10);\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}","map":{"version":3,"names":["codes","require","module","exports","status","STATUS_CODES","populateStatusesMap","redirect","empty","retry","statuses","arr","Object","keys","forEach","forEachCode","code","message","Number","toLowerCase","push","Error","TypeError","n","parseInt","isNaN"],"sources":["C:/Users/Moran/Documents/react-projects/react-demo/node_modules/statuses/index.js"],"sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.STATUS_CODES = codes\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEnC;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGC,MAAM;;AAEvB;AACAA,MAAM,CAACC,YAAY,GAAGL,KAAK;;AAE3B;AACAI,MAAM,CAACJ,KAAK,GAAGM,mBAAmB,CAACF,MAAM,EAAEJ,KAAK,CAAC;;AAEjD;AACAI,MAAM,CAACG,QAAQ,GAAG;EAChB,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE;AACP,CAAC;;AAED;AACAH,MAAM,CAACI,KAAK,GAAG;EACb,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE;AACP,CAAC;;AAED;AACAJ,MAAM,CAACK,KAAK,GAAG;EACb,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE;AACP,CAAC;;AAED;AACA;AACA;AACA;;AAEA,SAASH,mBAAmBA,CAAEI,QAAQ,EAAEV,KAAK,EAAE;EAC7C,IAAIW,GAAG,GAAG,EAAE;EAEZC,MAAM,CAACC,IAAI,CAACb,KAAK,CAAC,CAACc,OAAO,CAAC,SAASC,WAAWA,CAAEC,IAAI,EAAE;IACrD,IAAIC,OAAO,GAAGjB,KAAK,CAACgB,IAAI,CAAC;IACzB,IAAIZ,MAAM,GAAGc,MAAM,CAACF,IAAI,CAAC;;IAEzB;IACAN,QAAQ,CAACN,MAAM,CAAC,GAAGa,OAAO;IAC1BP,QAAQ,CAACO,OAAO,CAAC,GAAGb,MAAM;IAC1BM,QAAQ,CAACO,OAAO,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGf,MAAM;;IAExC;IACAO,GAAG,CAACS,IAAI,CAAChB,MAAM,CAAC;EAClB,CAAC,CAAC;EAEF,OAAOO,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASP,MAAMA,CAAEY,IAAI,EAAE;EACrB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,IAAI,CAACZ,MAAM,CAACY,IAAI,CAAC,EAAE,MAAM,IAAIK,KAAK,CAAC,uBAAuB,GAAGL,IAAI,CAAC;IAClE,OAAOA,IAAI;EACb;EAEA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIM,SAAS,CAAC,iCAAiC,CAAC;EACxD;;EAEA;EACA,IAAIC,CAAC,GAAGC,QAAQ,CAACR,IAAI,EAAE,EAAE,CAAC;EAC1B,IAAI,CAACS,KAAK,CAACF,CAAC,CAAC,EAAE;IACb,IAAI,CAACnB,MAAM,CAACmB,CAAC,CAAC,EAAE,MAAM,IAAIF,KAAK,CAAC,uBAAuB,GAAGE,CAAC,CAAC;IAC5D,OAAOA,CAAC;EACV;EAEAA,CAAC,GAAGnB,MAAM,CAACY,IAAI,CAACG,WAAW,CAAC,CAAC,CAAC;EAC9B,IAAI,CAACI,CAAC,EAAE,MAAM,IAAIF,KAAK,CAAC,2BAA2B,GAAGL,IAAI,GAAG,GAAG,CAAC;EACjE,OAAOO,CAAC;AACV"},"metadata":{},"sourceType":"script","externalDependencies":[]}