{"ast":null,"code":"var prr = require('prr');\nfunction init(type, message, cause) {\n  if (!!message && typeof message != 'string') {\n    message = message.message || message.name;\n  }\n  prr(this, {\n    type: type,\n    name: type\n    // can be passed just a 'cause'\n    ,\n    cause: typeof message != 'string' ? message : cause,\n    message: message\n  }, 'ewr');\n}\n\n// generic prototype, not intended to be actually used - helpful for `instanceof`\nfunction CustomError(message, cause) {\n  Error.call(this);\n  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);\n  init.call(this, 'CustomError', message, cause);\n}\nCustomError.prototype = new Error();\nfunction createError(errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause);\n    //TODO: the specificity here is stupid, errno should be available everywhere\n    if (type == 'FilesystemError') {\n      this.code = this.cause.code;\n      this.path = this.cause.path;\n      this.errno = this.cause.errno;\n      this.message = (errno.errno[this.cause.errno] ? errno.errno[this.cause.errno].description : this.cause.message) + (this.cause.path ? ' [' + this.cause.path + ']' : '');\n    }\n    Error.call(this);\n    if (Error.captureStackTrace) Error.captureStackTrace(this, err);\n  };\n  err.prototype = !!proto ? new proto() : new CustomError();\n  return err;\n}\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto);\n  };\n  return {\n    CustomError: CustomError,\n    FilesystemError: ce('FilesystemError'),\n    createError: ce\n  };\n};","map":{"version":3,"names":["prr","require","init","type","message","cause","name","CustomError","Error","call","captureStackTrace","constructor","prototype","createError","errno","proto","err","code","path","description","module","exports","ce","FilesystemError"],"sources":["C:/Users/Moran/Documents/react-projects/react-demo/node_modules/errno/custom.js"],"sourcesContent":["var prr = require('prr')\n\nfunction init (type, message, cause) {\n  if (!!message && typeof message != 'string') {\n    message = message.message || message.name\n  }\n  prr(this, {\n      type    : type\n    , name    : type\n      // can be passed just a 'cause'\n    , cause   : typeof message != 'string' ? message : cause\n    , message : message\n  }, 'ewr')\n}\n\n// generic prototype, not intended to be actually used - helpful for `instanceof`\nfunction CustomError (message, cause) {\n  Error.call(this)\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, this.constructor)\n  init.call(this, 'CustomError', message, cause)\n}\n\nCustomError.prototype = new Error()\n\nfunction createError (errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause)\n    //TODO: the specificity here is stupid, errno should be available everywhere\n    if (type == 'FilesystemError') {\n      this.code    = this.cause.code\n      this.path    = this.cause.path\n      this.errno   = this.cause.errno\n      this.message =\n        (errno.errno[this.cause.errno]\n          ? errno.errno[this.cause.errno].description\n          : this.cause.message)\n        + (this.cause.path ? ' [' + this.cause.path + ']' : '')\n    }\n    Error.call(this)\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(this, err)\n  }\n  err.prototype = !!proto ? new proto() : new CustomError()\n  return err\n}\n\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto)\n  }\n  return {\n      CustomError     : CustomError\n    , FilesystemError : ce('FilesystemError')\n    , createError     : ce\n  }\n}\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAExB,SAASC,IAAIA,CAAEC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAE;EACnC,IAAI,CAAC,CAACD,OAAO,IAAI,OAAOA,OAAO,IAAI,QAAQ,EAAE;IAC3CA,OAAO,GAAGA,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACE,IAAI;EAC3C;EACAN,GAAG,CAAC,IAAI,EAAE;IACNG,IAAI,EAAMA,IAAI;IACdG,IAAI,EAAMH;IACV;IAAA;IACAE,KAAK,EAAK,OAAOD,OAAO,IAAI,QAAQ,GAAGA,OAAO,GAAGC,KAAK;IACtDD,OAAO,EAAGA;EACd,CAAC,EAAE,KAAK,CAAC;AACX;;AAEA;AACA,SAASG,WAAWA,CAAEH,OAAO,EAAEC,KAAK,EAAE;EACpCG,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EAChB,IAAID,KAAK,CAACE,iBAAiB,EACzBF,KAAK,CAACE,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACC,WAAW,CAAC;EACjDT,IAAI,CAACO,IAAI,CAAC,IAAI,EAAE,aAAa,EAAEL,OAAO,EAAEC,KAAK,CAAC;AAChD;AAEAE,WAAW,CAACK,SAAS,GAAG,IAAIJ,KAAK,CAAC,CAAC;AAEnC,SAASK,WAAWA,CAAEC,KAAK,EAAEX,IAAI,EAAEY,KAAK,EAAE;EACxC,IAAIC,GAAG,GAAG,SAAAA,CAAUZ,OAAO,EAAEC,KAAK,EAAE;IAClCH,IAAI,CAACO,IAAI,CAAC,IAAI,EAAEN,IAAI,EAAEC,OAAO,EAAEC,KAAK,CAAC;IACrC;IACA,IAAIF,IAAI,IAAI,iBAAiB,EAAE;MAC7B,IAAI,CAACc,IAAI,GAAM,IAAI,CAACZ,KAAK,CAACY,IAAI;MAC9B,IAAI,CAACC,IAAI,GAAM,IAAI,CAACb,KAAK,CAACa,IAAI;MAC9B,IAAI,CAACJ,KAAK,GAAK,IAAI,CAACT,KAAK,CAACS,KAAK;MAC/B,IAAI,CAACV,OAAO,GACV,CAACU,KAAK,CAACA,KAAK,CAAC,IAAI,CAACT,KAAK,CAACS,KAAK,CAAC,GAC1BA,KAAK,CAACA,KAAK,CAAC,IAAI,CAACT,KAAK,CAACS,KAAK,CAAC,CAACK,WAAW,GACzC,IAAI,CAACd,KAAK,CAACD,OAAO,KACnB,IAAI,CAACC,KAAK,CAACa,IAAI,GAAG,IAAI,GAAG,IAAI,CAACb,KAAK,CAACa,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;IAC3D;IACAV,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;IAChB,IAAID,KAAK,CAACE,iBAAiB,EACzBF,KAAK,CAACE,iBAAiB,CAAC,IAAI,EAAEM,GAAG,CAAC;EACtC,CAAC;EACDA,GAAG,CAACJ,SAAS,GAAG,CAAC,CAACG,KAAK,GAAG,IAAIA,KAAK,CAAC,CAAC,GAAG,IAAIR,WAAW,CAAC,CAAC;EACzD,OAAOS,GAAG;AACZ;AAEAI,MAAM,CAACC,OAAO,GAAG,UAAUP,KAAK,EAAE;EAChC,IAAIQ,EAAE,GAAG,SAAAA,CAAUnB,IAAI,EAAEY,KAAK,EAAE;IAC9B,OAAOF,WAAW,CAACC,KAAK,EAAEX,IAAI,EAAEY,KAAK,CAAC;EACxC,CAAC;EACD,OAAO;IACHR,WAAW,EAAOA,WAAW;IAC7BgB,eAAe,EAAGD,EAAE,CAAC,iBAAiB,CAAC;IACvCT,WAAW,EAAOS;EACtB,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}