{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nutil.inherits(Readable, Stream);\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended) onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);\n      if (!addToFront) state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n        if (state.needReadable) emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else return state.length;\n  }\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n  if (!util.isNumber(n) || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n  if (!util.isNull(ret)) this.emit('data', ret);\n  return ret;\n};\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) process.nextTick(function () {\n      emitReadable_(stream);\n    });else emitReadable_(stream);\n  }\n}\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function () {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause', src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function () {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function () {\n      resume_(stream, state);\n    });\n  }\n}\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length) return;\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function () {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","isArray","require","Buffer","ReadableState","EE","EventEmitter","listenerCount","emitter","type","listeners","length","Stream","util","inherits","StringDecoder","debug","debuglog","options","stream","Duplex","hwm","highWaterMark","defaultHwm","objectMode","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","readableObjectMode","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","call","prototype","push","chunk","state","isString","readableAddChunk","unshift","addToFront","er","chunkInvalid","emit","isNullOrUndefined","onEofChunk","e","Error","write","read","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","roundUpToNextPowerOf2","n","p","howMuchToRead","isNaN","isNull","nOrig","isNumber","endReadable","doRead","_read","ret","fromList","isBuffer","TypeError","end","process","nextTick","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","pause","unpipe","_events","error","resume","dests","i","indexOf","splice","ev","fn","res","self","addListener","resumeScheduled","resume_","wrap","paused","isFunction","isUndefined","method","apply","arguments","events","forEach","bind","_fromList","list","stringMode","shift","join","concat","buf","slice","c","l","cpy","Math","min","copy","xs","f","x"],"sources":["C:/Users/Moran/Documents/react-projects/react-demo/node_modules/level-blobs/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}